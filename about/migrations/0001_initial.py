# Generated by Django 3.2 on 2022-08-07 11:08

import about.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('number', models.IntegerField()),
                ('title_np', models.CharField(blank=True, max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommunityMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.CharField(blank=True, choices=[('Board of Director', 'Board of Director'), ('Technical team', 'Technical Team'), ('Advisory Committee', 'Advisory Committee'), ('Management Committee', 'Management Committee')], max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('position', models.CharField(blank=True, max_length=255, null=True)),
                ('organization', models.CharField(blank=True, max_length=255, null=True)),
                ('name_np', models.CharField(blank=True, max_length=255, null=True)),
                ('position_np', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_np', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to=about.models.community_member_image)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255)),
                ('description', tinymce.models.HTMLField(default='<p>write your questions</p>')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnail', verbose_name='Thumbnail')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name='Slug')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('ICU Machine', 'ICU Machine'), ('Ventilator Machine', 'Ventilator Machine'), ('Patient Monitor', 'Patient Monitor'), ('Infusion Pump', 'Infusion Pump'), ('Suction Pump', 'Suction Pump'), ('X-ray Machine', 'X-ray Machine'), ('Arterial Blood Gas (ABG) Machine', 'Arterial Blood Gas (ABG) Machine'), ('Defibrillator', 'Defibrillator'), ('BiPap Machine (bilevel positive airway pressure)', 'BiPap Machine (bilevel positive airway pressure)'), ('CPAP Machine (Continuous positive airway pressure', 'CPAP Machine (Continuous positive airway pressure'), ('High flow Nasal Cannula', 'High flow Nasal Cannula'), ('ECG Machine', 'ECG Machine'), ('Oxygen Concentrator', 'Oxygen Concentrator'), ('Autoclave Machine', 'Autoclave Machine'), ('BSC Level', 'BSC Level'), ('Automated Extraction', 'Automated Extraction'), ('PCR Machine', 'PCR Machine')], max_length=255, null=True)),
                ('equipments_before_covid', models.CharField(blank=True, max_length=255, null=True)),
                ('equipments_after_covid', models.CharField(blank=True, max_length=255, null=True)),
                ('operational', models.CharField(blank=True, max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HitCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visits', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='municipality', to='about.district')),
            ],
            options={
                'verbose_name_plural': 'Municipalities',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=about.models.upload_about_organization_picture)),
                ('category', models.CharField(blank=True, choices=[('L', 'Leading'), ('S', 'Support'), ('C', 'Co-Support')], default='C', max_length=2, null=True)),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=14, null=True)),
                ('contact_email', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_website', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_social_media', models.CharField(blank=True, max_length=1024, null=True)),
                ('title_np', models.CharField(max_length=255)),
                ('description_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('contact_number_np', models.CharField(blank=True, max_length=14, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Solve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_from', models.CharField(max_length=1024)),
                ('request_for', models.CharField(max_length=1024)),
                ('support_provided', models.CharField(max_length=1024)),
                ('details', models.CharField(max_length=1024)),
                ('request_from_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('request_for_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('support_provided_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('details_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=about.models.upload_solve_files)),
                ('document', models.CharField(blank=True, max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_type', models.CharField(blank=True, choices=[('L', 'Leads'), ('M', 'Members'), ('T', 'Management')], max_length=1, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('lead_type', models.CharField(blank=True, choices=[('P', 'Provincial Lead'), ('T', 'Team Lead')], default='P', max_length=1, null=True)),
                ('province', models.CharField(max_length=255)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=about.models.upload_about_picture)),
                ('full_name', models.CharField(max_length=255)),
                ('position', models.CharField(max_length=255)),
                ('primary_contact', models.CharField(blank=True, max_length=14, null=True)),
                ('secondary_contact', models.CharField(blank=True, max_length=14, null=True)),
                ('qualifications', models.CharField(max_length=1024)),
                ('description', models.CharField(max_length=1024)),
                ('resume', models.FileField(blank=True, null=True, upload_to=about.models.upload_about_resume)),
                ('is_approved', models.BooleanField(default=False)),
                ('province_np', models.CharField(blank=True, max_length=255, null=True)),
                ('full_name_np', models.CharField(blank=True, max_length=255, null=True)),
                ('position_np', models.CharField(blank=True, max_length=255, null=True)),
                ('primary_contact_np', models.CharField(blank=True, max_length=14, null=True)),
                ('secondary_contact_np', models.CharField(blank=True, max_length=14, null=True)),
                ('qualifications_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('description_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trainee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(max_length=255)),
                ('ethnic', models.CharField(blank=True, max_length=255, null=True)),
                ('education', models.CharField(blank=True, max_length=255, null=True)),
                ('associated_organization_or_clinic', models.CharField(blank=True, max_length=255, null=True)),
                ('area_of_expertise', models.CharField(blank=True, max_length=255, null=True)),
                ('experience', models.CharField(blank=True, max_length=255, null=True)),
                ('ege_group', models.CharField(blank=True, choices=[('Below 19', 'Below 19'), ('20-29', '20-29'), ('30-39', '30-39'), ('40-49', '40-49'), ('50-59', '50-59'), ('Above 60', 'Above 60')], max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('logitude', models.FloatField(blank=True, null=True)),
                ('profile', models.ImageField(blank=True, null=True, upload_to=about.models.trainer_profile)),
                ('certification_from_mot', models.CharField(blank=True, choices=[('yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trainer', to='about.district')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trainer', to='about.municipality')),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trainer', to='about.province')),
            ],
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ward', to='about.district')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ward', to='about.municipality')),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ward', to='about.province')),
            ],
        ),
        migrations.CreateModel(
            name='Trainings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('lalitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True)),
                ('logitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='about.trainer')),
            ],
        ),
        migrations.AddField(
            model_name='trainer',
            name='ward',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trainer', to='about.ward'),
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(max_length=255)),
                ('skill_percentage', models.IntegerField(blank=True, null=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='about.trainer')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('category', models.CharField(blank=True, choices=[('AN', 'announcement'), ('NE', 'news'), ('VI', 'videos'), ('AR', 'articals')], max_length=2, null=True)),
                ('content', tinymce.models.HTMLField(default='<p>Hello world</p>')),
                ('video_link', models.CharField(blank=True, max_length=1024, null=True)),
                ('slug', models.CharField(blank=True, max_length=1024, null=True)),
                ('image', models.ImageField(blank=True, default='default.jpg', max_length=1024, null=True, upload_to=about.models.upload_resources_image)),
                ('summary', models.CharField(blank=True, max_length=255, null=True)),
                ('title_np', models.CharField(blank=True, max_length=255, null=True)),
                ('content_np', tinymce.models.HTMLField(default='<p>विवरण</p>')),
                ('slug_np', models.CharField(blank=True, max_length=1024, null=True)),
                ('summary_np', models.CharField(blank=True, max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='municipality',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='municipality', to='about.province'),
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact_number', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_email', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('name_np', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_number_np', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_email_np', models.CharField(blank=True, max_length=255, null=True)),
                ('province_np', models.CharField(blank=True, max_length=255, null=True)),
                ('address_np', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('icu_beds', models.IntegerField(blank=True, default=0, null=True)),
                ('hdu_beds', models.IntegerField(blank=True, default=0, null=True)),
                ('hfnc_beds', models.IntegerField(blank=True, default=0, null=True)),
                ('isolation_beds', models.IntegerField(blank=True, default=0, null=True)),
                ('oxygen_supplied_beds', models.IntegerField(blank=True, default=0, null=True)),
                ('doctor_permanents_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('doctor_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('doctor_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('nurse_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('nurse_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('nurse_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('pharmacist_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('pharmacist_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('pharmacist_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_engineer_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_engineer_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_engineer_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_technician_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_technician_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('biomedical_technician_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('health_assistant_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('health_assistant_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('health_assistant_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('lab_technician_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('lab_technician_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('lab_technician_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('radio_grapher_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('radio_grapher_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('radio_grapher_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('other_paramedics_permanent_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('other_paramedics_temperoray_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('other_paramedics_development_staff', models.IntegerField(blank=True, default=0, null=True)),
                ('icu_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('icu_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('icu_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('ventilator_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('ventilator_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('ventilator_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('hdu_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('hdu_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('hdu_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('hfnc_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('hfnc_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('hfnc_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('isolation_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('isolation_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('isolation_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('oxygen_supplied_patients_admitted', models.IntegerField(blank=True, default=0, null=True)),
                ('oxygen_supplied_patients_discharged', models.IntegerField(blank=True, default=0, null=True)),
                ('oxygen_supplied_patients_deaths', models.IntegerField(blank=True, default=0, null=True)),
                ('equipments_name', models.CharField(blank=True, choices=[('ICU Machine', 'ICU Machine'), ('Ventilator Machine', 'Ventilator Machine'), ('Patient Monitor', 'Patient Monitor'), ('Infusion Pump', 'Infusion Pump'), ('Suction Pump', 'Suction Pump'), ('X-ray Machine', 'X-ray Machine'), ('Arterial Blood Gas (ABG) Machine', 'Arterial Blood Gas (ABG) Machine'), ('Defibrillator', 'Defibrillator'), ('BiPap Machine (bilevel positive airway pressure)', 'BiPap Machine (bilevel positive airway pressure)'), ('CPAP Machine (Continuous positive airway pressure', 'CPAP Machine (Continuous positive airway pressure'), ('High flow Nasal Cannula', 'High flow Nasal Cannula'), ('ECG Machine', 'ECG Machine'), ('Oxygen Concentrator', 'Oxygen Concentrator'), ('Autoclave Machine', 'Autoclave Machine'), ('BSC Level', 'BSC Level'), ('Automated Extraction', 'Automated Extraction'), ('PCR Machine', 'PCR Machine')], max_length=255, null=True)),
                ('equipments_before_covid', models.CharField(blank=True, default=0, max_length=255, null=True)),
                ('equipments_after_covid', models.CharField(blank=True, default=0, max_length=255, null=True)),
                ('operational', models.CharField(blank=True, max_length=255, null=True)),
                ('total_biomedical_equipments', models.IntegerField(blank=True, null=True)),
                ('total_patients_admitted', models.IntegerField(blank=True, null=True)),
                ('equipment_emergency_for_patients', models.CharField(blank=True, choices=[('Never', 'Never'), ('Rarely (1-3 patients/month', 'Rarely (1-3 patients/month'), ('Many times (4-9 patients/month', 'Many times (4-9 patients/month'), ('Frequently (410 patients/month', 'Frequently (410 patients/month'), ('I do not know', 'I do not know')], max_length=255, null=True)),
                ('must_used_equipments', models.CharField(blank=True, max_length=255, null=True)),
                ('yearly_expenditure_spent_for_equipments', models.CharField(blank=True, choices=[('Less than 1 lakh', 'Less than 1 lakh'), ('1-50 lakh', '1-50 lakh'), ('50 lakh - 1 crore', '50 lakh - 1 crore'), ('more than 1 crore', 'more than 1 crore')], max_length=255, null=True)),
                ('calibrate_biomedical_equipment', models.CharField(blank=True, choices=[('Twice in a year', 'Twice in an year'), ('Once a year', 'Once a year'), ('After problem arises', 'After problem arises'), ('other', 'other')], max_length=255, null=True)),
                ('biomedical_calibrate_from_others', models.CharField(blank=True, max_length=400, null=True)),
                ('are_hospital_repair_equipments', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'No')], max_length=255, null=True)),
                ('aware_about_calibration_of_biomedical_equipment', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'No')], max_length=255, null=True)),
                ('repair_and_maintenance', models.CharField(blank=True, choices=[('Twice in a year', 'Twice in an year'), ('Once a year', 'Once a year'), ('After problem arises', 'After problem arises'), ('other', 'other')], max_length=255, null=True)),
                ('repaired_by', models.CharField(blank=True, choices=[('self', 'self'), ('from others', 'from others')], max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('create_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital', to='about.district')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital', to='about.municipality')),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital', to='about.province')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital', to='about.ward')),
            ],
        ),
        migrations.CreateModel(
            name='HelpRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('contact', models.CharField(max_length=10)),
                ('email', models.EmailField(max_length=254)),
                ('urgency', models.CharField(choices=[('Urgent', 'Urgent'), ('Moderate', 'Moderate'), ('NotUrgent', 'Not Urgent')], max_length=255)),
                ('request_for', models.CharField(choices=[('OC', 'Oxygen Concentrator'), ('OV', 'Oxygen Ventilator'), ('OP', 'Oxygen Plant'), ('DM', 'Dialysis Machine'), ('other', 'Other')], max_length=255)),
                ('our_supports_for_you', models.CharField(blank=True, max_length=500, null=True)),
                ('time_duration', models.CharField(blank=True, max_length=255, null=True)),
                ('anything', models.TextField(blank=True, null=True)),
                ('request_status', models.CharField(blank=True, choices=[('solved', 'solved'), ('unsolved', 'unsolved')], max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='about.province')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_type', models.CharField(max_length=255)),
                ('unit', models.IntegerField(blank=True, null=True)),
                ('model_number', models.CharField(blank=True, max_length=255, null=True)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('suppliers', models.CharField(blank=True, max_length=255, null=True)),
                ('remarks', models.CharField(blank=True, max_length=255, null=True)),
                ('equipment_type_np', models.CharField(blank=True, max_length=255, null=True)),
                ('unit_np', models.IntegerField(blank=True, null=True)),
                ('model_number_np', models.CharField(blank=True, max_length=255, null=True)),
                ('company_name_np', models.CharField(blank=True, max_length=255, null=True)),
                ('suppliers_np', models.CharField(blank=True, max_length=255, null=True)),
                ('remarks_np', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('operational', models.IntegerField(blank=True, default=0, null=True)),
                ('not_operational', models.IntegerField(blank=True, default=0, null=True)),
                ('in_maintenance', models.IntegerField(blank=True, default=0, null=True)),
                ('total_equipments', models.IntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='about.hospital')),
            ],
        ),
        migrations.AddField(
            model_name='district',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='district', to='about.province'),
        ),
        migrations.CreateModel(
            name='Choices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', tinymce.models.HTMLField(blank=True, default='<p>write your answer</p>', null=True)),
                ('vote', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('edited_date', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='about.discussion')),
            ],
            options={
                'verbose_name': 'Comment and like',
            },
        ),
    ]
